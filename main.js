'use strict'

let str = "12 asdasd 12 asad34 98 3423fgfd 23";
let str2 = "10 sdfsdf 8 234s";

function getBoundaryNumber(string) {

  let rezalt = string.match(/\b\d+\b/mg);

  return rezalt.map(number => Number(number.trim()));
}

console.log(getBoundaryNumber(str));
console.log(getBoundaryNumber(str2));


let adress = "127.0.0.0";
let adress2 = "127.01.155.10";
let adress3 = "127.0т155.10";

function getBoundaryAdress(string) {

  let rezalt =  (/\b((25[0-5]|2[0-4][0-9]|1[0-9]?[0-9]?|\b0\b)(\.|$)){4}\b/).test(string);

  return rezalt
}

console.log(getBoundaryAdress(adress));
console.log(getBoundaryAdress(adress2));
console.log(getBoundaryAdress(adress3));

// \b - граница слова в начале и в конце, для того чтобы обозначить края виражения
// () - скобочная группа для групировки цифтр и символов
// [] - прмежуток от и до, поскольку api v4 не должен содержать чифру больше 255 мы задаем эту границу
// 25 и любое число от 0-5, далее 2 и лубое число от 0-4 и 0-9 так как 25 у нас уже есть, 
// далее у нас может быть либо 1 либо лубое число до 199
// ? - означает, что оно может быть, а может и не быть. 
// Так как перед числом не должен быть ноль, мы задаем границу \b для нуля, т.е. если у нас после нуля не может быть другого числа если он один
// | - мы используем для перебора вариантов, т.е. в нашем случае каждое значение что удовлетворяет условие описанное мной выше.
// \ - экранирование для мета-символа "точка" иначе он будет восприниматья как любой сивмол, а нам нужно чтобы в конце была либо точка, либо конец строки
// флаги в нашем случае можно не ставить